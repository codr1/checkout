package checkout

import (
	"fmt"
	"strconv"
)

// UnifiedPollingConfig holds all configuration for HTMX polling and expiration
type UnifiedPollingConfig struct {
	PaymentID      string
	PaymentType    string  // "qr" or "terminal"
	PollEndpoint   string
	PollInterval   string  // e.g. "2s"  
	ExpireEndpoint string
	ExpireDelay    string  // e.g. "120s"
	IncludeFields  string  // e.g. "[name='payment_intent_id'], [name='reader_id']"
	TargetElement  string  // e.g. "#payment-status-details"
}

// UnifiedPollingContainer creates the HTMX polling and expiration logic
// This is the core component that replaces scattered polling patterns
templ UnifiedPollingContainer(config UnifiedPollingConfig) {
	<!-- Status polling trigger -->
	<div id={ fmt.Sprintf("%s-polling-container", config.PaymentType) }
		hx-get={ config.PollEndpoint }
		hx-trigger={ fmt.Sprintf("load, every %s", config.PollInterval) }
		hx-target={ config.TargetElement }
		hx-swap="innerHTML">
	</div>
	
	<!-- Auto-expiration trigger -->
	if config.ExpireEndpoint != "" {
		<div class="hidden-action-trigger"
			hx-post={ config.ExpireEndpoint }
			hx-include={ config.IncludeFields }
			hx-target="#modal-content"
			hx-swap="innerHTML"
			hx-trigger={ fmt.Sprintf("load delay:%s", config.ExpireDelay) }>
		</div>
	}
	
	<style>
		.hidden-action-trigger {
			display: none;
		}
	</style>
}

// SimpleProgressDisplay shows progress without polling (used by handlers)
templ SimpleProgressDisplay(paymentType string, secondsRemaining int, progressWidth float64, statusMessage string) {
	<div class={ fmt.Sprintf("payment-progress %s-progress", paymentType) }>
		<p>{ statusMessage }</p>
		<p>Payment expires in <span id="countdown">{ strconv.Itoa(secondsRemaining) }</span> seconds</p>
		<div class="progress-bar">
			<div class="progress-fill" style={ fmt.Sprintf("width: %.1f%%;", progressWidth) }></div>
		</div>
	</div>
}

// QRPaymentContainer creates the complete QR payment UI with unified polling
templ QRPaymentContainer(qrBase64 string, paymentLinkID string, totalAmount float64, customerEmail string) {
	<div class="qr-code-section" id="payment-container">
		<h3>Payment QR Code</h3>
		
		<!-- QR Code Display -->
		<div class="qr-code">
			<img src={ "data:image/png;base64," + qrBase64 } alt="Payment QR Code" width="256" height="256">
			<p class="total-amount">Total Amount: ${ fmt.Sprintf("%.2f", totalAmount) }</p>
			<p class="instructions">Scan with your camera app to pay</p>
		</div>
		
		<!-- Hidden form fields -->
		<input type="hidden" name="payment_link_id" id="payment_link_id" value={ paymentLinkID } />
		<input type="hidden" name="customer_email" id="customer_email" value={ customerEmail } />
		
		<!-- Status display area -->
		<div id="payment-status">
			<p>Waiting for QR code scan...</p>
		</div>
		
		<!-- Unified polling configuration -->
		@UnifiedPollingContainer(UnifiedPollingConfig{
			PaymentID:      paymentLinkID,
			PaymentType:    "qr",
			PollEndpoint:   "/check-paymentlink-status?payment_link_id=" + paymentLinkID + "&customer_email=" + customerEmail,
			PollInterval:   "2s",
			ExpireEndpoint: "/expire-payment-link",
			ExpireDelay:    "120s",
			IncludeFields:  "[name='payment_link_id']",
			TargetElement:  "#payment-status",
		})
		
		<!-- Cancel button -->
		<button 
			type="button" 
			class="cancel-btn" 
			hx-post="/cancel-payment-link"
			hx-include="[name='payment_link_id']"
			hx-target="#modal-content" 
			hx-swap="innerHTML"
		>
			Cancel Payment
		</button>
	</div>
}

// TerminalPaymentContainer creates the complete terminal payment UI with unified polling
templ TerminalPaymentContainer(paymentIntentID string, readerID string, totalAmount float64, customerEmail string) {
	<div class="terminal-processing-container" id="terminal-payment-status-container">
		<h3>Processing Payment on Terminal</h3>
		<p>Please complete the transaction on the payment terminal.</p>
		<p>Total Amount: <strong>${ fmt.Sprintf("%.2f", totalAmount) }</strong></p>
		if customerEmail != "" {
			<p>Email for receipt: <strong>{ customerEmail }</strong></p>
		}
		
		<!-- Loading spinner -->
		<div class="loading-spinner-container">
			<div class="loading-spinner"></div>
		</div>

		<!-- Hidden form fields -->
		<input type="hidden" name="payment_intent_id" id="payment_intent_id" value={ paymentIntentID }/>
		<input type="hidden" name="reader_id" id="reader_id" value={ readerID }/>

		<!-- Status display area -->
		<div id="terminal-payment-status-details">
			<p>Initializing...</p>
		</div>

		<!-- Unified polling configuration -->
		@UnifiedPollingContainer(UnifiedPollingConfig{
			PaymentID:      paymentIntentID,
			PaymentType:    "terminal",
			PollEndpoint:   fmt.Sprintf("/check-terminal-payment-status?payment_intent_id=%s&reader_id=%s", paymentIntentID, readerID),
			PollInterval:   "2s",
			ExpireEndpoint: "/expire-terminal-payment",
			ExpireDelay:    "120s",
			IncludeFields:  "#payment_intent_id, #reader_id",
			TargetElement:  "#terminal-payment-status-details",
		})

		<!-- Cancel button -->
		<div class="modal-footer">
			<button
				type="button"
				class="cancel-btn"
				hx-post="/cancel-terminal-payment"
				hx-include="#payment_intent_id, #reader_id" 
				hx-target="#modal-content"                 
				hx-swap="innerHTML"
			>
				Cancel Payment
			</button>
		</div>
	</div>
	
	<style>
		.loading-spinner-container {
			display: flex;
			justify-content: center;
			align-items: center;
			margin: 20px 0;
		}
		.loading-spinner {
			border: 4px solid #f3f3f3;
			border-top: 4px solid #3498db;
			border-radius: 50%;
			width: 30px;
			height: 30px;
			animation: spin 1s linear infinite;
		}
		@keyframes spin {
			0% { transform: rotate(0deg); }
			100% { transform: rotate(360deg); }
		}
		.terminal-processing-info p {
			margin: 5px 0;
		}
	</style>
}

// Helper function to get display name for payment type
func getPaymentTypeDisplay(paymentType string) string {
	switch paymentType {
	case "qr":
		return "QR Code Payment"
	case "terminal":
		return "Terminal Payment"
	default:
		return "Payment"
	}
}

