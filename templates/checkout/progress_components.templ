package checkout

import (
	"fmt"
	"strconv"
)

// UnifiedSSEConfig holds all configuration for SSE and expiration
type UnifiedSSEConfig struct {
	PaymentID      string
	PaymentType    string  // "qr" or "terminal"
	ExpireEndpoint string
	ExpireDelay    string  // e.g. "120s"
	IncludeFields  string  // e.g. "[name='payment_intent_id'], [name='reader_id']"
	TargetElement  string  // e.g. "#payment-status-details"
}

// UnifiedSSEContainer creates the SSE connection and expiration logic
templ UnifiedSSEContainer(config UnifiedSSEConfig) {
	<!-- Direct SSE connection that swaps content directly -->
	<div id={ fmt.Sprintf("%s-sse-progress", config.PaymentType) }
		hx-ext="sse"
		sse-connect={ fmt.Sprintf("/payment-events?payment_id=%s&type=%s", config.PaymentID, config.PaymentType) }
		sse-swap="payment-update"
		hx-target={ "#" + config.PaymentType + "-payment-status-details" }
		hx-swap="innerHTML">
	</div>
	
	<!-- Separate SSE connection for modal updates -->
	<div id={ fmt.Sprintf("%s-sse-modal", config.PaymentType) }
		hx-ext="sse"
		sse-connect={ fmt.Sprintf("/payment-events?payment_id=%s&type=%s", config.PaymentID, config.PaymentType) }
		sse-swap="modal-update"
		hx-target="#modal-content"
		hx-swap="innerHTML">
	</div>
	
	<!-- Auto-expiration trigger -->
	if config.ExpireEndpoint != "" && config.IncludeFields != "" {
		<div class="hidden-action-trigger"
			hx-post={ config.ExpireEndpoint }
			hx-include={ config.IncludeFields }
			hx-target="#modal-content"
			hx-swap="innerHTML"
			hx-trigger={ fmt.Sprintf("load delay:%s", config.ExpireDelay) }>
		</div>
	} else if config.ExpireEndpoint != "" {
		<div class="hidden-action-trigger"
			hx-post={ config.ExpireEndpoint }
			hx-vals={ "{\"payment_link_id\": \"" + config.PaymentID + "\"}" }
			hx-target="#modal-content"
			hx-swap="innerHTML"
			hx-trigger={ fmt.Sprintf("load delay:%s", config.ExpireDelay) }>
		</div>
	}
	
	<style>
		.hidden-action-trigger {
			display: none;
		}
	</style>
}

// SimpleProgressDisplay shows progress without polling (used by handlers)
templ SimpleProgressDisplay(paymentType string, secondsRemaining int, progressWidth float64, statusMessage string) {
	<div class={ fmt.Sprintf("payment-progress %s-progress", paymentType) }>
		<p>{ statusMessage }</p>
		<p>Payment expires in <span id="countdown">{ strconv.Itoa(secondsRemaining) }</span> seconds</p>
		<div class="progress-bar">
			<div class="progress-fill" style={ fmt.Sprintf("width: %.1f%%;", progressWidth) }></div>
		</div>
	</div>
}

// QRPaymentContainer - SSE-powered real-time payment updates
templ QRPaymentContainer(qrBase64 string, paymentLinkID string, totalAmount float64, customerEmail string) {
	<div class="qr-payment-container" id="payment-container">
		<h3>Payment QR Code</h3>
		<div class="qr-code-display">
			<img src={ "data:image/png;base64," + qrBase64 } alt="Payment QR Code" class="qr-code-image"/>
			<p class="qr-instructions">
				Scan this QR code with your camera app to pay securely.
			</p>
			<p class="payment-amount">
				Total Amount: <strong>${ fmt.Sprintf("%.2f", totalAmount) }</strong>
			</p>
			if customerEmail != "" {
				<p class="customer-email">
					Receipt will be sent to: <strong>{ customerEmail }</strong>
				</p>
			}
		</div>
		
		<!-- Status display area that will be updated by SSE -->
		<div id="qr-payment-status-details">
			<div class="payment-progress qr-progress">
				<h4>QR Code Payment in Progress</h4>
				<p>Waiting for QR code scan...</p>
				<p>Payment expires in <span id="countdown">120</span> seconds</p>
				<div class="progress-bar">
					<div class="progress-fill" style="width: 0%;"></div>
				</div>
				<p><small>Payment ID: { paymentLinkID }</small></p>
			</div>
		</div>

		<!-- Unified SSE configuration -->
		@UnifiedSSEContainer(UnifiedSSEConfig{
			PaymentID:      paymentLinkID,
			PaymentType:    "qr",
			ExpireEndpoint: "/expire-payment-link",
			ExpireDelay:    "120s",
			IncludeFields:  "",
			TargetElement:  "#qr-payment-status-details",
		})
		
		<!-- Action buttons -->
		<div class="payment-actions">
			<button 
				type="button" 
				class="cancel-btn" 
				hx-post="/cancel-payment-link"
				hx-vals={ "{\"payment_link_id\": \"" + paymentLinkID + "\"}" }
				hx-target="#modal-content"
				hx-swap="innerHTML"
				hx-confirm="Are you sure you want to cancel this payment?"
			>
				Cancel Payment
			</button>
		</div>
	</div>
}


// TerminalPaymentContainer creates the complete terminal payment UI with SSE
templ TerminalPaymentContainer(paymentIntentID string, readerID string, totalAmount float64, customerEmail string) {
	<div class="terminal-processing-container" id="terminal-payment-status-container">
		<h3>Processing Payment on Terminal</h3>
		<p>Please complete the transaction on the payment terminal.</p>
		<p>Total Amount: <strong>${ fmt.Sprintf("%.2f", totalAmount) }</strong></p>
		if customerEmail != "" {
			<p>Email for receipt: <strong>{ customerEmail }</strong></p>
		}

		<!-- Hidden form fields -->
		<input type="hidden" name="payment_intent_id" id="payment_intent_id" value={ paymentIntentID }/>
		<input type="hidden" name="reader_id" id="reader_id" value={ readerID }/>

		<!-- Status display area - will be populated by SSE -->
		<div id="terminal-payment-status-details">
			<!-- Empty - SSE will populate this immediately -->
		</div>

		<!-- Unified SSE configuration -->
		@UnifiedSSEContainer(UnifiedSSEConfig{
			PaymentID:      paymentIntentID,
			PaymentType:    "terminal",
			ExpireEndpoint: "/expire-terminal-payment",
			ExpireDelay:    "120s",
			IncludeFields:  "[name='payment_intent_id'], [name='reader_id']",
			TargetElement:  "#terminal-payment-status-details",
		})

		<!-- Cancel button -->
		<div class="modal-footer">
			<button
				type="button"
				class="cancel-btn"
				hx-post="/cancel-terminal-payment"
				hx-include="#payment_intent_id, #reader_id" 
				hx-target="#modal-content"                 
				hx-swap="innerHTML"
			>
				Cancel Payment
			</button>
		</div>
	</div>
}

// Helper function to get display name for payment type
func getPaymentTypeDisplay(paymentType string) string {
	switch paymentType {
	case "qr":
		return "QR Code Payment"
	case "terminal":
		return "Terminal Payment"
	default:
		return "Payment"
	}
}

