package checkout

import (
	"fmt"
	"strconv"
	
	"checkout/config"
)

// PaymentSSEConfig holds all configuration for SSE and expiration
type PaymentSSEConfig struct {
	PaymentID      string
	PaymentType    string  // "qr" or "terminal"
	ExpireEndpoint string
	ExpireDelay    string  // e.g. "120s"
	IncludeFields  string  // e.g. "[name='payment_intent_id'], [name='reader_id']"
	TargetElement  string  // e.g. "#payment-status-details"
}

// PaymentSSEContainer creates the SSE connection and expiration logic
templ PaymentSSEContainer(sseConfig PaymentSSEConfig) {
	<!-- Single SSE connection with multiple event handlers -->
	<div id={ fmt.Sprintf("%s-sse-container", sseConfig.PaymentType) }
		hx-ext="sse"
		sse-connect={ fmt.Sprintf("/payment-events?payment_id=%s&type=%s", sseConfig.PaymentID, sseConfig.PaymentType) }>
		
		<!-- Handler for payment progress updates -->
		<div sse-swap="payment-update" 
			hx-target={ "#" + sseConfig.PaymentType + "-payment-status-details" }
			hx-swap="innerHTML"></div>
	
		<!-- Handler for modal replacement on completion -->
		<div sse-swap="modal-update" 
		hx-target="#modal-content"
			hx-swap="innerHTML"></div>
	</div>
	
	<!-- Auto-expiration trigger (server timeout) -->
	if sseConfig.ExpireEndpoint != "" && sseConfig.IncludeFields != "" {
		<div class="hidden-action-trigger"
			hx-post={ sseConfig.ExpireEndpoint }
			hx-include={ sseConfig.IncludeFields }
			hx-target="#modal-content"
			hx-swap="innerHTML"
			hx-trigger={ fmt.Sprintf("load delay:%s", sseConfig.ExpireDelay) }>
		</div>
	} else if sseConfig.ExpireEndpoint != "" {
		<div class="hidden-action-trigger"
			hx-post={ sseConfig.ExpireEndpoint }
			hx-vals={ "{\"payment_id\": \"" + sseConfig.PaymentID + "\", \"type\": \"" + sseConfig.PaymentType + "\"}" }
			hx-target="#modal-content"
			hx-swap="innerHTML"
			hx-trigger={ fmt.Sprintf("load delay:%s", sseConfig.ExpireDelay) }>
		</div>
	}
	
	<!-- Failsafe timeout trigger (SSE safety net) -->
	<div class="hidden-action-trigger"
		hx-get="/get-payment-status"
		hx-vals={ "{\"payment_id\": \"" + sseConfig.PaymentID + "\", \"type\": \"" + sseConfig.PaymentType + "\"}" }
		hx-target="#modal-content"
		hx-swap="innerHTML"
		hx-trigger={ fmt.Sprintf("load delay:%ds", config.GetFailsafeTimeoutSeconds()) }>
	</div>
}

// PaymentStatusArea creates the standardized status display with progress
templ PaymentStatusArea(paymentType, paymentID, additionalInfo string) {
	<div id={ paymentType + "-payment-status-details" }>
		<div class={ fmt.Sprintf("payment-progress %s-progress", paymentType) }>
			<h4>{ getPaymentTypeDisplay(paymentType) } in Progress</h4>
			if paymentType == "qr" {
				<p>Waiting for QR code scan...</p>
			} else if paymentType == "terminal" {
				<p>Please complete the transaction on the payment terminal</p>
			}
			<p>Payment expires in <span id={ fmt.Sprintf("%s-countdown", paymentType) }>{ strconv.Itoa(config.GetPaymentTimeoutSeconds()) }</span> seconds</p>
			<div class="progress-bar">
				<div class="progress-fill" id={ fmt.Sprintf("%s-progress-fill", paymentType) } style="width: 0%;"></div>
			</div>
			<p><small>{ additionalInfo }</small></p>
		</div>
	</div>
}

// PaymentInfo displays payment amount and customer email consistently
templ PaymentInfo(totalAmount float64, customerEmail string) {
	<div>
		<p>
			Total Amount: <strong>${ fmt.Sprintf("%.2f", totalAmount) }</strong>
		</p>
		if customerEmail != "" {
			<p>
				Receipt will be sent to: <strong>{ customerEmail }</strong>
			</p>
		}
	</div>
}

// PaymentCancelButton - unified cancel button for both QR and Terminal payments
templ PaymentCancelButton(paymentType string, paymentID string, includeFields string, confirmMessage string) {
	<button
		type="button"
		class="cancel-btn"
		hx-post="/cancel-or-refresh-payment"
		hx-target="#modal-content"
		hx-swap="innerHTML"
		hx-include={ includeFields }
		hx-confirm={ confirmMessage }
		hx-vals={ fmt.Sprintf(`{"payment_id": "%s", "type": "%s"}`, paymentID, paymentType) }
	>
		Cancel Payment
	</button>
}

// QRPaymentContainer - Payment container for QR code payments
templ QRPaymentContainer(qrBase64 string, paymentLinkID string, totalAmount float64, customerEmail string) {
	<div id="qr-payment-container">
		<h3>QR Code Payment</h3>
		<div>
			<img src={ "data:image/png;base64," + qrBase64 } alt="Payment QR Code"/>
			<p>
				Scan this QR code with your camera app to pay securely.
			</p>
			@PaymentInfo(totalAmount, customerEmail)
		</div>
		
		<!-- Payment status with progress display -->
		@PaymentStatusArea("qr", paymentLinkID, fmt.Sprintf("Payment ID: %s", paymentLinkID))
		
		<!-- JavaScript countdown timer (visual only) -->
		@templ.Raw(fmt.Sprintf(`<script>
			initPaymentCountdown('qr-countdown', 'qr-progress-fill', %d);
		</script>`, config.GetPaymentTimeoutSeconds()))

		<!-- SSE configuration -->
		@PaymentSSEContainer(PaymentSSEConfig{
			PaymentID:      paymentLinkID,
			PaymentType:    "qr",
			ExpireEndpoint: "/cancel-or-refresh-payment",
			ExpireDelay:    config.PaymentExpireDelay,
			IncludeFields:  "",
			TargetElement:  "#qr-payment-status-details",
		})
		
		<!-- Action buttons -->
		@PaymentCancelButton("qr", paymentLinkID, "", "Are you sure you want to cancel this payment?")
	</div>
}

// TerminalPaymentContainer - payment container for terminal payments
templ TerminalPaymentContainer(paymentIntentID string, readerID string, totalAmount float64, customerEmail string) {
	<div id="terminal-payment-container">
		<h3>Terminal Payment</h3>
		<p>Please complete the transaction on the payment terminal.</p>
		@PaymentInfo(totalAmount, customerEmail)

		<!-- Hidden form fields -->
		<input type="hidden" name="payment_intent_id" id="payment_intent_id" value={ paymentIntentID }/>
		<input type="hidden" name="reader_id" id="reader_id" value={ readerID }/>

		<!-- Payment status with progress display -->
		@PaymentStatusArea("terminal", paymentIntentID, fmt.Sprintf("Reader: %s | Payment ID: %s", readerID, paymentIntentID))
		
		<!-- JavaScript countdown timer (visual only) -->
		@templ.Raw(fmt.Sprintf(`<script>
			initPaymentCountdown('terminal-countdown', 'terminal-progress-fill', %d);
		</script>`, config.GetPaymentTimeoutSeconds()))

		<!-- SSE configuration -->
		@PaymentSSEContainer(PaymentSSEConfig{
			PaymentID:      paymentIntentID,
			PaymentType:    "terminal",
			ExpireEndpoint: "/cancel-or-refresh-payment",
			ExpireDelay:    config.PaymentExpireDelay,
			IncludeFields:  "",  // Use hx-vals instead of form fields for reliability
			TargetElement:  "#terminal-payment-status-details",
		})

		<!-- Cancel button -->
		@PaymentCancelButton("terminal", paymentIntentID, "#payment_intent_id, #reader_id", "Are you sure you want to cancel this payment?")
	</div>
}

// Helper function to get display name for payment type
func getPaymentTypeDisplay(paymentType string) string {
	switch paymentType {
	case "qr":
		return "QR Code Payment"
	case "terminal":
		return "Terminal Payment"
	default:
		return "Payment"
	}
}

