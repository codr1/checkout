package templates

templ Layout(title string) {
	<!DOCTYPE html>
	<html>
	<head>
		<title>{ title }</title>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		
		<!-- Favicons -->
		<link rel="icon" type="image/x-icon" href="/static/images/favicon/favicon.ico"/>
		<link rel="icon" type="image/png" sizes="16x16" href="/static/images/favicon/favicon-16x16.png"/>
		<link rel="icon" type="image/png" sizes="32x32" href="/static/images/favicon/favicon-32x32.png"/>
		<link rel="apple-touch-icon" sizes="180x180" href="/static/images/favicon/apple-touch-icon.png"/>
		<link rel="icon" type="image/png" sizes="192x192" href="/static/images/favicon/android-chrome-192x192.png"/>
		<link rel="icon" type="image/png" sizes="512x512" href="/static/images/favicon/android-chrome-512x512.png"/>
		<link rel="manifest" href="/static/site.webmanifest"/>
		
		<link rel="stylesheet" href="/static/css/styles.css"/>
		<script src="https://unpkg.com/htmx.org@1.9.6"></script>
        <script src="https://unpkg.com/htmx.org/dist/ext/sse.js"></script>
		<script src="https://js.stripe.com/v3/"></script>
	</head>
	<body>
		<div id="toast" class="toast" hx-swap-oob="true"></div>
		
		<!-- Modal container -->
		<div id="modal-container" class="modal-container hidden" hx-swap-oob="true">
			<div class="modal-background"></div>
			<div class="modal-content" id="modal-content">
				<!-- Modal content will be loaded here -->
			</div>
		</div>
		
		{ children... }
		
		<script>
			// Actions menu dropdown toggle function
			function toggleActionsMenu() {
				const dropdown = document.getElementById('actionsDropdown');
				dropdown.classList.toggle('show');
			}
			
			// Close dropdown when clicking outside
			document.addEventListener('click', function(event) {
				const actionsMenu = document.querySelector('.actions-menu');
				const dropdown = document.getElementById('actionsDropdown');
				
				if (actionsMenu && !actionsMenu.contains(event.target)) {
					dropdown.classList.remove('show');
				}
			});
			
			// HTMX event listener for toast messages
			document.body.addEventListener('showToast', function(evt) {
				const toast = document.getElementById('toast');
				toast.textContent = evt.detail;
				toast.className = 'toast show'; // Reset classes and add show
				setTimeout(function() {
					toast.classList.remove('show');
				}, 3000);
			});
			
			// HTMX event listener for success toast messages (green)
			document.body.addEventListener('showToastSuccess', function(evt) {
				const toast = document.getElementById('toast');
				toast.textContent = evt.detail;
				toast.className = 'toast toast-success show'; // Add success styling
				setTimeout(function() {
					toast.classList.remove('show');
				}, 3000);
			});
			
			// Listen for HX-Trigger response header with showToast
			document.addEventListener('htmx:afterOnLoad', function(evt) {
				const triggerHeader = evt.detail.xhr.getResponseHeader('HX-Trigger');
				if (triggerHeader) {
					try {
						const triggers = JSON.parse(triggerHeader);
						if (triggers.showToast) {
							const event = new CustomEvent('showToast', {
								detail: triggers.showToast
							});
							document.body.dispatchEvent(event);
						}
						
						// Handle showToastSuccess trigger
						if (triggers.showToastSuccess) {
							const event = new CustomEvent('showToastSuccess', {
								detail: triggers.showToastSuccess
							});
							document.body.dispatchEvent(event);
						}
						
						// Handle showModal trigger
						if (triggers.showModal) {
							document.getElementById('modal-container').classList.remove('hidden');
						}
						
						// Handle closeModal trigger
						if (triggers.closeModal) {
							document.getElementById('modal-container').classList.add('hidden');
						}
					} catch (e) {
						// If it's not JSON, it might be a simple trigger name
						if (triggerHeader === 'showToast') {
							const event = new CustomEvent('showToast', {
								detail: 'Operation completed'
							});
							document.body.dispatchEvent(event);
						} else if (triggerHeader === 'showModal') {
							document.getElementById('modal-container').classList.remove('hidden');
						} else if (triggerHeader === 'closeModal') {
							document.getElementById('modal-container').classList.add('hidden');
						}
					}
				}
			});
			
			
			// Close modal when clicking outside or on close button
			document.querySelector('.modal-background').addEventListener('click', function() {
				document.getElementById('modal-container').classList.add('hidden');
			});
			
			document.addEventListener('htmx:afterOnLoad', function(evt) {
				const triggerHeader = evt.detail.xhr.getResponseHeader('HX-Trigger');
				if (triggerHeader === 'closeModal') {
					document.getElementById('modal-container').classList.add('hidden');
				}
			});
		</script>
	</body>
	</html>
}

templ LoginPage() {
	@Layout("POS Login") {
		<div class="login-container">
			<img src="/static/images/PicklePOS.png" alt="PicklePOS Logo" class="login-logo"/>
			<h1>POS System Login</h1>
			<div id="login-error"></div>
			<form method="POST" action="/login" hx-post="/login" hx-target="#login-error">
				<div>
					<input type="password" name="password" placeholder="Enter Password" autofocus required/>
				</div>
				<div>
					<button type="submit">Login</button>
				</div>
			</form>
		</div>
	}
}

templ ConfigPage() {
	@Layout("POS Configuration") {
		<div class="config-container">
			<h1>POS System Configuration</h1>
			<form hx-post="/save-config" hx-swap="none">
				<h2>Authentication</h2>
				<div>
					<label for="password">Password (min 8 characters):</label>
					<input type="password" id="password" name="password" />
				</div>
				
				<h2>Stripe Configuration</h2>
				<div>
					<label for="stripeSecretKey">Stripe Secret Key:</label>
					<input type="password" id="stripeSecretKey" name="stripeSecretKey" />
				</div>
				
				<h2>Business Information</h2>
				<div>
					<label for="businessName">Business Name:</label>
					<input type="text" id="businessName" name="businessName" />
				</div>
				<div>
					<label for="businessStreet">Street Address:</label>
					<input type="text" id="businessStreet" name="businessStreet" />
				</div>
				<div>
					<label for="businessCity">City:</label>
					<input type="text" id="businessCity" name="businessCity" />
				</div>
				<div>
					<label for="businessState">State:</label>
					<input type="text" id="businessState" name="businessState" />
				</div>
				<div>
					<label for="businessZIP">ZIP Code:</label>
					<input type="text" id="businessZIP" name="businessZIP" />
				</div>
				
				<h2>Tax Information</h2>
				<div>
					<label for="businessTaxID">Business Tax ID (EIN):</label>
					<input type="text" id="businessTaxID" name="businessTaxID" />
				</div>
				<div>
					<label for="salesTaxNumber">Sales Tax Registration Number:</label>
					<input type="text" id="salesTaxNumber" name="salesTaxNumber" />
				</div>
				<div>
					<label for="vatNumber">VAT Number (if applicable):</label>
					<input type="text" id="vatNumber" name="vatNumber" />
				</div>
				
				<h2>Website Information</h2>
				<div>
					<label for="websiteName">Website Name (for HTTPS):</label>
					<input type="text" id="websiteName" name="websiteName" />
				</div>
				
				<h2>Default Customer Location</h2>
				<div>
					<label for="defaultCity">Default City:</label>
					<input type="text" id="defaultCity" name="defaultCity" />
				</div>
				<div>
					<label for="defaultState">Default State:</label>
					<input type="text" id="defaultState" name="defaultState" />
				</div>
				
				<h2>System Configuration</h2>
				<div>
					<label for="port">Server Port:</label>
					<input type="text" id="port" name="port" placeholder="3000" />
				</div>
				<div>
					<label for="dataDir">Data Directory:</label>
					<input type="text" id="dataDir" name="dataDir" placeholder="./data" />
				</div>
				<div>
					<label for="transactionsDir">Transactions Directory:</label>
					<input type="text" id="transactionsDir" name="transactionsDir" placeholder="./data/transactions" />
				</div>
				
				<div>
					<button type="submit">Save Configuration</button>
				</div>
			</form>
		</div>
	}
}

