package pos

import (
	"checkout/templates"
	"checkout/services"
	"fmt"
)

// POS main page
templ Page(availableReaders []templates.StripeReader, selectedReaderID string) {
	@templates.Layout("POS System", services.AppState.LayoutContext) {
		<div class="top-bar-controls">
			<div class="left-controls">
				<div class="actions-menu">
					<button class="actions-menu-btn" onclick="toggleActionsMenu()">
						<svg width="16" height="16" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
							<circle cx="12" cy="12" r="2" fill="currentColor"></circle>
							<circle cx="12" cy="4" r="2" fill="currentColor"></circle>
							<circle cx="12" cy="20" r="2" fill="currentColor"></circle>
						</svg>
					</button>
					<div class="actions-dropdown" id="actionsDropdown">
						<div class="dropdown-item" 
							 hx-post="/clear-terminal-transaction" 
							 hx-swap="none" 
							 hx-confirm="Are you sure you want to clear the current terminal transaction? This will cancel any pending payment."
							 hx-on:click="document.getElementById('actionsDropdown').classList.remove('show')">
							Clear Transaction
						</div>
						<div class="dropdown-item" 
							 hx-get="/settings" 
							 hx-target="#modal-content"
							 hx-on:click="document.getElementById('actionsDropdown').classList.remove('show')">
							Settings
						</div>
					</div>
				</div>
				
			if len(availableReaders) > 0 {
				<form class="reader-select-form" hx-post="/set-selected-reader" hx-trigger="change" hx-swap="none">
					<label for="reader_id_select">Terminal:</label>
					<select name="reader_id" id="reader_id_select">
						for _, reader := range availableReaders {
							<option value={ reader.ID } selected?={ reader.ID == selectedReaderID }>
								if reader.Label != "" {
									if reader.Status != "online" {
										{ fmt.Sprintf("%s (%s)", reader.Label, reader.Status) }
									} else {
										{ reader.Label }
									}
								} else {
									if reader.Status != "online" {
										{ fmt.Sprintf("%s (%s)", reader.ID, reader.Status) }
									} else {
										{ reader.ID }
									}
								}
							</option>
						}
					</select>
					// Adding a submit button for accessibility/fallback, though hx-trigger="change" handles it.
					// This button can be hidden with CSS if desired.
					<button type="submit" style="display:none;">Set Reader</button>
				</form>
			} else {
				<span class="no-readers-available">No terminal readers configured.</span>
			}
				</div>
				
			<button class="logout-btn" hx-post="/logout" hx-push-url="true">Logout</button>
		</div>

		<div class="container">
			<div class="products-section">
				<h3>Products</h3>
				<div hx-get="/products" hx-trigger="load"></div>

				<div class="custom-product">
					<h3>Custom Product</h3>
					<form hx-post="/add-custom-product" hx-swap="none">
						<div>
							<input type="text" name="name" placeholder="Product name" required/>
						</div>
						<div>
							<input type="text" name="description" placeholder="Description"/>
						</div>
						<div>
							<input type="number" name="price" step="0.01" placeholder="Price" required/>
						</div>
						<button type="submit">Add to Cart</button>
					</form>
				</div>
			</div>
			
			<div class="cart-section">
				<h3>Current Cart</h3>
				
				<!-- Scrollable cart items area -->
				<div class="cart-items-scroll-area" hx-get="/cart-items" hx-trigger="load, cartUpdated from:body"></div>
				
				<!-- Fixed bottom checkout area -->
				<div class="cart-bottom-fixed">
					<!-- Cart summary -->
					<div hx-get="/cart-summary" hx-trigger="load, cartUpdated from:body"></div>
					
					<!-- Checkout form -->
					<div hx-get="/checkout-form" hx-trigger="load"></div>
					
					<!-- Cancel button -->
					<button 
						class="cancel-transaction-btn" 
						hx-post="/cancel-transaction" 
						hx-swap="none" 
						hx-confirm="Are you sure you want to cancel this transaction? This will clear your cart.">
						Cancel Transaction
					</button>
				</div>
			</div>
		</div>
	}
}
